{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetailsInfo.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","res","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","resBodyMiddleware","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","userValues","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","values","Object","assign","ActivityFormValues","undefined","title","date","description","category","city","venue","Profile","user","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","predicateFilters","set","setActivity","userStore","isGoing","attendees","some","x","isHost","hostUsername","host","find","Date","loadActivities","a","axiosParams","paginatedActivities","setPagination","forEach","console","log","setLoadingInitial","setPagingParams","getActivity","loadActivity","runInAction","createActivity","activityFormValues","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","attendee","cancelActivitToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","setPredicateFilter","value","includes","makeAutoObservable","reaction","keys","clear","Array","from","sort","b","getTime","entries","activities","reduce","format","URLSearchParams","toString","toISOString","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","loadProfile","photo","photos","isMain","setImage","setDisplayName","activityStore","followingCount","loadFollowings","setActiveTab","tabNumber","loadUserActivities","UserStore","credentials","setToken","modalStore","closeModal","logout","getUser","window","localStorage","getItem","appLoaded","setAppLoaded","setItem","removeItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","formValues","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","filters","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","List","horizontal","map","Popup","hoverable","trigger","bordered","borderColor","borderWidth","circular","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","activitiesByDate","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingMoreActivities","setLoadingMoreActivities","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","event","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useParams","useHistory","nullable","enableReinitialize","newActivity","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","ribbon","zIndex","top","relaxed","divided","verticalAlign","Extra","TestErrors","baseUrl","widths","err","primary","App","Inline","message","Modal","closeIcon","dimmer","onClose","setEditMode","ProfileAbout","isCurrentUser","Tab","Pane","panes","menuItem","pane","React","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","MyDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","ProfileActivities","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ProfilePage","ServerError","ActivityForm","NotFound","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.4eaef806.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\n\r\nexport class PagingParams {\r\n    pageNumber: number;\r\n    pageSize: number;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {  // all optional\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}\r\n","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';  // from index.tsx\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\n\r\naxios.interceptors.request.use(config => {  // attach token\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers!.Authorization = `Bearer ${token}`;  // bearer token\r\n    return config;\r\n});\r\n\r\n\r\naxios.interceptors.response.use(res => {  // error catching middleware\r\n    const pagination = res.headers['pagination'];\r\n    if (pagination) {  // pagination comes as a string, needs to be parsed\r\n        res.data = new PaginatedResult(res.data, JSON.parse(pagination));\r\n        return res as AxiosResponse<PaginatedResult<any>>;  // for intellisense \r\n    }\r\n    return res;\r\n\r\n}, (error: AxiosError) => {\r\n    const { data, status, config } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data == 'string') {  // regular 400 error\r\n                toast.error(data);\r\n            }\r\n\r\n            const badGuidError = config.method === 'get' && data.errors.hasOwnProperty('id');\r\n            if (badGuidError) {  // tried to get invalid guid, check video for explanation\r\n                history.push('/not-found');\r\n\r\n            }\r\n            \r\n            if (data.errors) {  // validation data\r\n                const modalStateErrors = [];  // list of sublists\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key]);  // add sublist\r\n                    }\r\n                }  // flat 1 level of nesting, since the the list has subslits as elements\r\n                throw modalStateErrors.flat();  // what we throw here is .catch in the callback catch\r\n            } \r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);  // save error to store\r\n            history.push('/server-error')\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n});\r\n\r\n\r\nconst resBodyMiddleware = <T> (res: AxiosResponse<T>) => res.data;  // middleware to return body directly instead of response\r\nconst requests = {  // types of used requests, T ends up in AxiosResponse<T> as the body type\r\n    get: <T> (url: string) => axios.get<T>(url).then(resBodyMiddleware),\r\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(resBodyMiddleware),\r\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(resBodyMiddleware),\r\n    delete: <T> (url: string) => axios.delete<T>(url).then(resBodyMiddleware),\r\n};\r\n\r\n\r\nconst Activities = {  // object of related requests                                          // pass search params\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params}).then(resBodyMiddleware),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.delete<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\n\r\nconst Account = {  // api auth methods\r\n    current: () => requests.get<User>('/account'),\r\n    login: (userValues: UserFormValues) => requests.post<User>('/account/login', userValues),\r\n    register: (userValues: UserFormValues) => requests.post<User>('/account/register', userValues)\r\n}\r\n\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {  // can't use requests since it needs form data\r\n        let formData = new FormData();\r\n        formData.append('File', file);  // need to match api expected name (File for our .NET class)\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.delete(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put('/profiles', profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\n\r\nexport default agent;\r\n","import { Profile } from \"./profile\";\r\n\r\n\r\nexport interface Activity {\r\n  id: string;\r\n  title: string;\r\n  date: Date | null; \r\n  description: string;\r\n  category: string;\r\n  city: string;\r\n  venue: string;\r\n\r\n  hostUsername: string;\r\n  isCancelled: boolean;\r\n  attendees: Profile[];\r\n  \r\n  isGoing: boolean\r\n  isHost: boolean;\r\n  host?: Profile;\r\n}\r\n\r\n\r\nexport class Activity implements Activity {\r\n  constructor(values?: ActivityFormValues) {\r\n    Object.assign(this, values);  \r\n  }\r\n}\r\n\r\n\r\nexport class ActivityFormValues {\r\n  id?: string = undefined;\r\n  title: string = '';\r\n  date: Date | null = null;\r\n  description: string = '';\r\n  category: string = '';\r\n  city: string = '';\r\n  venue: string = '';\r\n\r\n  constructor(activity?: ActivityFormValues) {\r\n    if (activity) {\r\n      this.id = activity.id;\r\n      this.title = activity.title;\r\n      this.date = activity.date;\r\n      this.description = activity.description;\r\n      this.category = activity.category;\r\n      this.city = activity.city;\r\n      this.venue = activity.venue;\r\n    }\r\n  }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    photos?: Photo[];\r\n    \r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { format } from \"date-fns\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicateFilters = new Map().set('all', true);  // to filter from isHost, isGoing and date\r\n\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicateFilters.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            } \r\n        );\r\n    }\r\n\r\n\r\n    get activities() {  // computed property, sorted by date\r\n        return Array.from(this.activityRegistry.values())\r\n            .sort((a, b) => a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get activitiesByDate() {  // object with dates as keys as activity lists as values\r\n        return Object.entries(\r\n            this.activities.reduce((activities, activity) => {\r\n                const key = format(activity.date!, 'dd MMM yyyy');  \r\n                activities[key] = \r\n                    activities[key] ? [...activities[key], activity] \r\n                    : [activity];\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })  // initial value\r\n        );\r\n    }\r\n\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;  // current cached user, can't be null for this point due to authentication\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(x => x.username === user.username);\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);  // trim hh/ss from date iso string\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n    \r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const paginatedActivities = await agent.Activities.list(this.axiosParams);  // pass axios search params\r\n            this.setPagination(paginatedActivities.pagination);\r\n            paginatedActivities.data.forEach(activity => this.setActivity(activity));\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        this.setLoadingInitial(false);\r\n    }\r\n\r\n\r\n    setPagination = (pagination: Pagination) => this.pagination = pagination;\r\n\r\n\r\n    setPagingParams = (params: PagingParams) => this.pagingParams = params;\r\n\r\n\r\n    get axiosParams() {  // returns the pagingParams as search params object\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicateFilters.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        });\r\n        return params;\r\n    }\r\n\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;  // retuning Promise<Activity | undefined>\r\n        } else {\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => this.selectedActivity = activity);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n\r\n    setLoadingInitial = (loadingInitial: boolean) => {\r\n        this.loadingInitial = loadingInitial;\r\n    } \r\n\r\n\r\n    createActivity = async (activityFormValues: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        try {\r\n            await agent.Activities.create(activityFormValues);\r\n            \r\n            const activity = new Activity(activityFormValues);  // initialize fields\r\n            activity.hostUsername = user!.username;\r\n            activity.attendees = [new Profile(user!)];\r\n            this.setActivity(activity);\r\n\r\n            runInAction(() => this.selectedActivity = activity);\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    } \r\n    \r\n    \r\n    updateActivity = async (activityFormValues: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activityFormValues);\r\n            runInAction(() => {\r\n                if (activityFormValues.id) {\r\n                    let updatedActivity = { ...this.getActivity(activityFormValues.id), ...activityFormValues };\r\n                    this.activityRegistry.set(activityFormValues.id, updatedActivity as Activity);  // remove and push activity aka update\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            });\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n    \r\n    \r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {  // if an user is trying to update their attendace they are inside of an activity, it can't be null\r\n            await agent.Activities.attend(this.selectedActivity!.id);  \r\n            runInAction(() => {  // update locally\r\n                if (this.selectedActivity?.isGoing) {  // going cancelled, remove from attendees\r\n                    this.selectedActivity.attendees = this.selectedActivity.attendees?.filter(\r\n                        a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                    \r\n                } else {  // now is going, add attendee\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n\r\n    cancelActivitToggle = async () => {  // same as above in API terms but little no none local state to update\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);  // negate isCancelled\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity!.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            });\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n\r\n    clearSelectedActivity = () => {\r\n      this.selectedActivity = undefined;\r\n    }\r\n\r\n\r\n    updateAttendeeFollowing = (username: string) => {  // local follow/unfollow update \r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following; \r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    setPredicateFilter = (filter: string, value: string | Date) => {\r\n        if (['all', 'isGoing', 'isHost'].includes(filter)) {\r\n            this.predicateFilters.forEach((value, key) => {  // cleanup everything but date \r\n                if (key !== 'startDate') this.predicateFilters.delete(key);\r\n            });\r\n        } \r\n            // we need to delete it to trigger the change reactions in keys\r\n        if (filter === 'startDate') this.predicateFilters.delete('startDate');\r\n        this.predicateFilters.set(filter, value);\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\n\r\nexport default class ProfileStore {\r\n  profile: Profile | null = null;\r\n  loadingProfile = false;\r\n  uploading = false;\r\n  loading = false;\r\n\r\n  followings: Profile[] = [];\r\n  loadingFollowings = false;\r\n  activeTab = 0;  // followers or following tab?\r\n\r\n  userActivities: UserActivity[] = [];\r\n  loadingActivities = false;\r\n\r\n  \r\n  constructor() {\r\n    makeAutoObservable(this);\r\n\r\n    reaction(  \r\n      () => this.activeTab,  // react to changes in activeTab, to change between followings and followers\r\n      activeTab => {\r\n        if (activeTab === 3 || activeTab === 4) {\r\n          const predicate = activeTab === 3 ? 'followers' : 'following';\r\n          this.loadFollowings(predicate);\r\n        } else {\r\n          this.followings = [];\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  \r\n  loadProfile = async (username: string) => {\r\n    this.loadingProfile = true;\r\n    try {\r\n      const profile = await agent.Profiles.get(username);\r\n      runInAction(() => {\r\n        this.profile = profile;\r\n        this.loadingProfile = false;\r\n      })\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n      runInAction(() => this.loadingProfile = false);\r\n    }\r\n  }\r\n\r\n\r\n  get isCurrentUser() {  // is loaded profile the current user?\r\n    if (store.userStore.user && this.profile) {\r\n      return store.userStore.user.username === this.profile.username\r\n    }\r\n    return false;\r\n  }\r\n\r\n\r\n  uploadPhoto = async (file: Blob) => {\r\n    this.uploading = true;\r\n    try {\r\n      const response = await agent.Profiles.uploadPhoto(file);\r\n      const photo = response.data;\r\n      \r\n      runInAction(() => {\r\n        if (this.profile) {\r\n          this.profile.photos?.push(photo);  // local update\r\n          \r\n          if (photo.isMain && store.userStore.user) {  // update current user photo\r\n            store.userStore.setImage(photo.url);\r\n            this.profile.image = photo.url;\r\n          }\r\n          this.uploading = false;\r\n        }\r\n      })\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n      runInAction(() => this.uploading = false);\r\n    }\r\n  }\r\n\r\n\r\n  setMainPhoto = async (photo: Photo) => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Profiles.setMainPhoto(photo.id);\r\n      store.userStore.setImage(photo.url);\r\n      runInAction(() => {\r\n        if (this.profile && this.profile.photos) {\r\n          this.profile.photos.find(x => x.isMain)!.isMain = false;  // unselected main\r\n          this.profile.photos.find(x => x.id === photo.id)!.isMain = true;  // select new main\r\n          this.profile.image = photo.url;  // local update\r\n          this.loading = false;\r\n        }\r\n      })\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n      runInAction(() => this.loading = false);\r\n    }\r\n  }\r\n  \r\n  \r\n  deletePhoto = async (photo: Photo) => {\r\n    this.loading = true;\r\n    try {\r\n      await agent.Profiles.deletePhoto(photo.id);\r\n      runInAction(() => {\r\n        if (this.profile) {\r\n          this.profile.photos = this.profile.photos?.filter(x => x.id !== photo.id);\r\n          this.loading = false;\r\n        }\r\n      })\r\n  \r\n    } catch (error) {\r\n      console.log(error);\r\n      runInAction(() => this.loading = false);\r\n    }\r\n  }\r\n\r\n\r\n  updateProfile = async (profile: Partial<Profile>) => {\r\n      this.loading = true;\r\n      try {\r\n          await agent.Profiles.updateProfile(profile);\r\n          runInAction(() => {\r\n            if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {  // display name was changed\r\n              store.userStore.setDisplayName(profile.displayName);\r\n            }\r\n            \r\n            this.profile = {...this.profile, ...profile as Profile};  // using as due to Partial type\r\n            this.loading = false;\r\n          });\r\n          \r\n      } catch (error) {\r\n        console.log(error);\r\n        runInAction(() => this.loading = false);\r\n      }\r\n  }\r\n\r\n\r\n  updateFollowing = async (username: string, following: boolean) => {  // following is the new value to set, not the current one\r\n    this.loading = true;\r\n    try {\r\n      await agent.Profiles.updateFollowing(username);\r\n      store.activityStore.updateAttendeeFollowing(username);  // update the followed user\r\n      \r\n      runInAction(() => {  // update the follower user\r\n        if (this.profile) {\r\n          if (this.profile.username !== store.userStore.user?.username \r\n              && this.profile.username === username) {  // we are following/unfollowing the profile\r\n            following ? this.profile.followersCount++ : this.profile.followersCount--;  // updating followers\r\n            this.profile.following = !this.profile.following;\r\n          }\r\n  \r\n          if (this.profile.username === store.userStore.user?.username) {  // we are following/unfollowing watching our profile (updating followings)\r\n            following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n          }\r\n\r\n        }\r\n        \r\n        this.followings.forEach(profile => {  // update in this store attendess list\r\n          if (profile.username === username) {\r\n            profile.following ? profile.followersCount-- : profile.followersCount++;\r\n            profile.following = !profile.following; \r\n          }\r\n        });\r\n        this.loading = false;\r\n      });\r\n      \r\n    } catch (error) {\r\n      console.log(error);\r\n      runInAction(() => this.loading = false);\r\n    }\r\n  }\r\n\r\n\r\n  loadFollowings = async (predicate: string) => {\r\n    this.loadingFollowings = true;\r\n    try {\r\n      const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n      runInAction(() => {\r\n        this.followings = followings;\r\n        this.loadingFollowings = false;\r\n      })\r\n\r\n    } catch (error) {\r\n      console.log(error);\r\n      runInAction(() => this.loadingFollowings = false);\r\n    }\r\n  }\r\n  \r\n  \r\n  setActiveTab = (tabNumber: any) => this.activeTab = tabNumber;\r\n\r\n\r\n  loadUserActivities = async (username: string, predicate?: string) => {\r\n    this.loadingActivities = true;\r\n    try {\r\n      const activities = await agent.Profiles.listActivities(username, predicate!);\r\n      runInAction(() => {\r\n        this.userActivities = activities;\r\n        this.loadingActivities = false;\r\n      })\r\n  \r\n    } catch (error) {\r\n      console.log(error);\r\n      runInAction(() => this.loadingActivities = false);\r\n    }\r\n  }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n\r\n    get isLoggedIn(): boolean {\r\n        return !!this.user;\r\n    }\r\n\r\n\r\n    register = async (credentials: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(credentials);\r\n            store.commonStore.setToken(user.token);  // save token to store and local storage\r\n            runInAction(() => this.user = user);  // because is after await\r\n            store.modalStore.closeModal();  // close login modal\r\n            history.push('/activities');\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n\r\n    login = async (credentials: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(credentials);\r\n            store.commonStore.setToken(user.token);  // save token to store and local storage\r\n            runInAction(() => this.user = user);  // because is after await\r\n            store.modalStore.closeModal();  // close login modal\r\n            history.push('/activities');\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n\r\n\r\n    setDisplayName = (displayName: string) => {\r\n        if (this.user) this.user.displayName = displayName;\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),  // server error, token \r\n    userStore: new UserStore(),  // auth (login, register...)\r\n    modalStore: new ModalStore(),  // to open modals everywhere\r\n    profileStore: new ProfileStore(),  // to get an user profile\r\n    commentStore: new CommentStore()  // to connect to SignalR comments hub\r\n};\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}\r\n\r\n","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');  // try to get from local storage at init time\r\n    appLoaded = false;\r\n    \r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,  // run on every token change\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token);  // save to local storage\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    \r\n    setServerError = (error: ServerError) => { this.error = error; }\r\n\r\n    setToken = (token: string | null) => { this.token = token; }\r\n    \r\n    setAppLoaded = () => { this.appLoaded = true; }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\n\r\ninterface Modal {\r\n    open: boolean,\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    } \r\n    \r\n    \r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!  // passing token\r\n                })\r\n                .withAutomaticReconnect()  // try to reconnect if connection lost\r\n                .configureLogging(LogLevel.Information)  // log info when connection\r\n                .build();\r\n            \r\n            this.hubConnection.start().catch(error => console.log('Error connecting to hub chat: ', error));  // start connection\r\n            \r\n            this.hubConnection.on('LoadComments', (comments: any[]) => {\r\n                runInAction(() => {\r\n                  comments.forEach(comment => { \r\n                    comment.createdAt = new Date(comment.createdAt);  // parse date, at Z to make it UTC\r\n                  });\r\n                  this.comments = comments as ChatComment[];\r\n                });\r\n            });  // call LoadComments event defined in API to receive the activity comments\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: any) => {\r\n                runInAction(() => {\r\n                  comment.createdAt = new Date(comment.createdAt);\r\n                  this.comments.unshift(comment as ChatComment);\r\n                });\r\n            });  // when adding just 1 comment, ReceiveComment also defined in API\r\n        }\r\n    }\r\n\r\n\r\n    stopHubConnection = () => {  // to stop connection\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n\r\n    clearComments = () =>  {  // cleanup method\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n\r\n    addComment = async (formValues: any) => {\r\n      formValues.activityId = store.activityStore.selectedActivity?.id;\r\n      try {  // SendComment needs to match the name of the method inside ChatHub in the API\r\n        await this.hubConnection?.invoke('SendComment', formValues);\r\n        \r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\n\r\nexport default observer(function NavBar() {\r\n  const { user, logout } = useStore().userStore;\r\n  return (\r\n    <Menu inverted fixed='top'>\r\n      <Container>\r\n\r\n        <Menu.Item as={NavLink} to='/' exact header>\r\n          <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}} />\r\n          Reactivities\r\n        </Menu.Item>\r\n\r\n        <Menu.Item as={NavLink} to='/activities' exact name='Activities' />\r\n        \r\n\r\n        <Menu.Item>\r\n          <Button as={NavLink} to='/createActivity' exact positive content='Create Activity' />\r\n        </Menu.Item>\r\n\r\n        <Menu.Item as={NavLink} to='/errors' exact name='Errors' />\r\n\r\n        <Menu.Item position='right'>\r\n          <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n          \r\n          <Dropdown pointing='top left' text={user?.displayName}>\r\n            <Dropdown.Menu>\r\n              <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\r\n              <Dropdown.Item onClick={logout} text='Logout' icon='sign-out' />\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n        </Menu.Item>\r\n      </Container>\r\n    </Menu>\r\n  )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\n\r\nexport default observer(function ActivityFilters () {\r\n  const { predicateFilters: filters, setPredicateFilter } = useStore().activityStore;\r\n  return (\r\n    <> \r\n        <Menu vertical size='large' style={{ width : '100%', marginTop: 27 }}>  {/* margin to align to first activity */} \r\n            <Header icon='filter' attached color='teal' content='Filters' />\r\n            <Menu.Item \r\n              content='All Activities' \r\n              active={filters.has('all')} \r\n              onClick={() => setPredicateFilter('all', 'true')}  \r\n            />\r\n\r\n            <Menu.Item \r\n              content=\"I'm Going\" \r\n              active={filters.has('isGoing')} \r\n              onClick={() => setPredicateFilter('isGoing', 'true')}  \r\n            />\r\n\r\n            <Menu.Item \r\n              content=\"I'm Hosting\" \r\n              active={filters.has('isHost')} \r\n              onClick={() => setPredicateFilter('isHost', 'true')}  \r\n            />\r\n        </Menu>\r\n        \r\n        <Header />\r\n        \r\n        <Calendar \r\n          onChange={(date: Date) => setPredicateFilter('startDate', date)}\r\n          value={filters.get('startDate') || new Date()}\r\n        />\r\n    </>\r\n  );\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport * as React from 'react';\r\nimport { SyntheticEvent } from 'react';\r\nimport { Button, Reveal } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\n\r\nexport interface Props {\r\n    profile: Profile;\r\n}\r\n\r\n\r\nexport default observer(function FollowButton ({ profile }: Props) {\r\n  const { updateFollowing, loading } = useStore().profileStore;\r\n  // we don't want to show if the use is watching his own profile\r\n  if (useStore().userStore.user?.username === profile.username) return null;\r\n\r\n  function handleFollow(e: SyntheticEvent) {\r\n    e.preventDefault();\r\n    updateFollowing(profile.username, !profile.following);\r\n  }\r\n\r\n  return (\r\n    <Reveal animated='move'>  {/* one is visible and the other is hidden, so they alternate when hovering */}\r\n        <Reveal.Content visible style={{width: '100%'}}>\r\n            <Button \r\n              fluid \r\n              color='teal' \r\n              content={profile.following ? 'Following' : 'Not following'} />\r\n        </Reveal.Content>\r\n\r\n        <Reveal.Content hidden style={{width: '100%'}}>\r\n            <Button \r\n                fluid \r\n                basic\r\n                color={profile.following ? 'red' : 'green'} \r\n                content={profile.following ? 'Unfollow' : 'Follow'} \r\n                loading={loading}\r\n                onClick={e => handleFollow(e)}\r\n            />\r\n        </Reveal.Content>\r\n    </Reveal>\r\n  );\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\nexport interface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer( function ProfileCard ({ profile }: Props) {\r\n  function truncate(str: string | undefined) {\r\n    if (str) {\r\n      return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n    }\r\n  }\r\n  return (\r\n    <Card as={Link} to ={`/profiles/${profile.username}`}>\r\n        <Image src={profile.image || '/assets/user.png'} />\r\n        <Card.Content>\r\n            <Card.Header>{profile.displayName}</Card.Header>\r\n            <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n        </Card.Content>\r\n\r\n        <Card.Content extra>\r\n            <Icon name='user' />\r\n            {profile.followersCount} {profile.followersCount > 1 ? 'followers' : 'follower' }\r\n        </Card.Content>\r\n\r\n        <FollowButton profile={profile} />\r\n    </Card>\r\n  );\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\n\r\nexport interface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\n\r\nexport default observer(function ActivityListItemAttendee ({ attendees }: Props) {\r\n  return (\r\n    <List horizontal>\r\n        { attendees.map(attendee => (\r\n            <Popup \r\n              hoverable\r\n              key={attendee.username}\r\n              trigger={\r\n                <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>  {/* link to profile */}\r\n                    <Image \r\n                      bordered\r\n                      style={attendee.following ? { borderColor: 'teal', borderWidth: 4 } : null }\r\n                      size='mini' \r\n                      circular \r\n                      src={ attendee.image || '/assets/user.png' } />  {/* image is optional */}\r\n                </List.Item>\r\n              }\r\n            >\r\n              <Popup.Content>\r\n                <ProfileCard profile={attendee} />\r\n              </Popup.Content>\r\n            </Popup>\r\n\r\n        ))}\r\n    </List>\r\n  );\r\n})\r\n","import { format } from 'date-fns';\r\nimport * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem ({ activity }: Props) {\r\n  return (\r\n    <Segment.Group>\r\n        <Segment>\r\n            {activity.isCancelled &&\r\n                <Label attached='top' color='red' content='Cancelled' style={{ textAlign: 'center' }} />\r\n            }\r\n\r\n            <Item.Group>\r\n                <Item>\r\n                    <Item.Image style={{ marginBottom: 6 }} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n\r\n                    <Item.Content>\r\n                        <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                            {activity.title}\r\n                        </Item.Header>\r\n\r\n                        <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\r\n                        \r\n                        {activity.isHost && (\r\n                            <Item.Description>\r\n                                <Label basic color='orange'>Hosting</Label>\r\n                            </Item.Description>\r\n                        )}\r\n\r\n                        {activity.isGoing && !activity.isHost && (\r\n                            <Item.Description>\r\n                                <Label basic color='teal'>Going</Label>\r\n                            </Item.Description>\r\n                        )}\r\n                    </Item.Content>\r\n                </Item>\r\n            </Item.Group>\r\n        </Segment>\r\n\r\n        <Segment>\r\n            <span>  {/* spane because this is basically inline */}\r\n                <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                <Icon name='marker' /> {activity.venue}\r\n            </span>\r\n        </Segment>\r\n\r\n        <Segment secondary>  {/* secondary = grey background */}\r\n            <ActivityListItemAttendee attendees={activity.attendees!} />\r\n        </Segment>\r\n\r\n        <Segment clearing>  {/* for our button to float correctly */}\r\n            <span>{activity.description}</span>\r\n            <Button \r\n                as={Link}\r\n                to={`/activities/${activity.id}`}\r\n                color='teal'\r\n                floated='right'\r\n                content='View'\r\n            />\r\n        </Segment>\r\n    </Segment.Group>\r\n  );\r\n}\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\n\r\nexport default observer(function AcivityList() {\r\n  const { activitiesByDate } = useStore().activityStore;\r\n  return (\r\n    <>\r\n      {activitiesByDate.map(([date, activities]) => (\r\n        <Fragment key={date}>\r\n\r\n          <Header sub color='teal'>\r\n            {date}\r\n          </Header>\r\n\r\n          {activities.map(activity => (\r\n            <ActivityListItem key={activity.id} activity={activity} />  \r\n            ))}\r\n\r\n        </Fragment>\r\n      ))}\r\n    </>\r\n  )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport AcivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\n\r\nexport default observer(function ActivityDashboard() {\r\n  const { loadActivities, activityRegistry, loadingInitial, setPagingParams, pagination } = useStore().activityStore;\r\n\r\n  const [loadingMoreActivities, setLoadingMoreActivities] = useState(false);  // are we loading next batch of activities?\r\n\r\n  function handleLoadMoreActivities() {\r\n    setLoadingMoreActivities(true);\r\n    setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n    loadActivities().then(() => setLoadingMoreActivities(false)); \r\n  }\r\n\r\n  useEffect(() => {\r\n    if (activityRegistry.size <= 1) loadActivities();  // when creating updating size is 1\r\n  }, [activityRegistry, loadActivities]);  // dependency\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width='10'>\r\n        {loadingInitial && !loadingMoreActivities ? ( \r\n          <>  {/* show animated placeholder */}\r\n            <ActivityListItemPlaceholder />  \r\n            <ActivityListItemPlaceholder />\r\n          </>\r\n        ) : (\r\n          <InfiniteScroll\r\n          pageStart={0}\r\n          loadMore={handleLoadMoreActivities}\r\n          hasMore={!loadingMoreActivities && !!pagination && pagination.currentPage < pagination.totalPages}  // stop condition\r\n          initialLoad={false}\r\n          >\r\n            <AcivityList />\r\n          </InfiniteScroll>\r\n        )}\r\n      </Grid.Column>\r\n\r\n      <Grid.Column width='6'>\r\n        <ActivityFilters />\r\n      </Grid.Column>\r\n\r\n      <Grid.Column width='10'>  {/* loader will appear at the bottom when loading activities */}\r\n        <Loader active={loadingMoreActivities} />  \r\n      </Grid.Column>\r\n    </Grid>\r\n  )\r\n})","import { useField } from 'formik';\r\nimport * as React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\nexport interface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    type?: string;  // for password\r\n}\r\n\r\nexport default function MyTextInput (props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={ meta.touched && meta.error }>\r\n            <label>{ props.label }</label>\r\n            <input { ...field } { ...props } />\r\n            { meta.touched && meta.error && (\r\n                <Label basic color='red'>{ meta.error }</Label>\r\n            )}\r\n        </Form.Field>\r\n    );\r\n}\r\n","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport * as React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\n\r\nexport default observer(function LoginForm () {\r\n  const { userStore } = useStore();\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ email: 'bob@test.com', password: 'Pa$$w0rd', error: null }}\r\n      onSubmit={(values, { setErrors }) => \r\n        userStore.login(values)\r\n        .catch(error => setErrors({ error: 'Invalid email or password' }))\r\n      }\r\n    >\r\n      {({ handleSubmit, isSubmitting, errors }) => (\r\n        <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n          <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n          <MyTextInput name='email' placeholder='Email' />\r\n          <MyTextInput name='password' placeholder='Password' type='password' />\r\n          <Button loading={isSubmitting} positive content='Login' type='submit' fluid />  {/* fluid button for the modal (to take full space) */}\r\n          \r\n          <ErrorMessage \r\n            name='error' \r\n            render={() => \r\n              <Label style={{ marginBottom: 10}} basic color='red' content={errors.error} />} \r\n          />\r\n        </Form> \r\n      )}\r\n    </Formik>\r\n  );\r\n})\r\n","import * as React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\n\r\nexport interface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors ({ errors }: Props) {  \r\n  return (  // just a list component of strings as errors\r\n    <Message error>\r\n        { errors && (\r\n            <Message.List>\r\n                { errors.map((error: any, i: any) => (\r\n                    <Message.Item key={i}>{error}</Message.Item>\r\n                )) }\r\n            </Message.List>\r\n        )}\r\n    </Message>\r\n  );\r\n}\r\n","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport * as React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\n\r\nexport default observer(function RegisterForm () {\r\n  const { userStore } = useStore();\r\n  return (\r\n    <Formik\r\n      initialValues={{ displayName: '', username: '', email: '', password: '', error: null }}\r\n      onSubmit={(values, { setErrors }) => \r\n        userStore.register(values)\r\n        .catch(error => setErrors({ error }))\r\n      }\r\n      validationSchema={Yup.object({\r\n        displayName: Yup.string().required(),\r\n        username: Yup.string().required(),\r\n        email: Yup.string().required().email(),\r\n        password: Yup.string().required()\r\n      })}\r\n    >\r\n      {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n        <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n          <Header as='h2' content='Register to Reactivities' color='teal' textAlign='center' />\r\n          \r\n          <MyTextInput name='displayName' placeholder='Display Name' />\r\n          <MyTextInput name='username' placeholder='Username' />\r\n          <MyTextInput name='email' placeholder='Email' />\r\n          <MyTextInput name='password' placeholder='Password' type='password' />\r\n          <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content='Register' type='submit' fluid />  {/* fluid button for the modal (to take full space) */}\r\n          \r\n          <ErrorMessage \r\n            name='error' \r\n            render={() => \r\n              <ValidationErrors errors={errors.error} />} \r\n          />\r\n        </Form> \r\n      )}\r\n    </Formik>\r\n  );\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container, Header, Image, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\n\r\nexport default observer(function HomePage () {\r\n  const { isLoggedIn } = useStore().userStore;\r\n  const { openModal } = useStore().modalStore;\r\n\r\n  return (\r\n    <Segment inverted textAlign='center' vertical className='masthead'>\r\n      <Container text>\r\n        <Header as='h1' inverted>\r\n          <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n          Reactivities\r\n        </Header>\r\n\r\n        { isLoggedIn ? (\r\n          <>\r\n            <Header as='h2' inverted content='Welcome to Reactivities' />\r\n            <Button as={Link} to='/activities' size='huge' inverted>Go to Activities</Button>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Button onClick={() => openModal(<LoginForm />)} to='/login' size='huge' inverted>Login</Button>\r\n            <Button onClick={() => openModal(<RegisterForm />)} to='/login' size='huge' inverted>Register</Button>\r\n          </>\r\n        )}\r\n\r\n\r\n      </Container>\r\n    </Segment>\r\n  );\r\n})\r\n","import * as React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\n\r\nexport interface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent ({inverted = true, content = 'Loading...'}: Props) {\r\n  return (  // to show when something is loading in our page\r\n    <Dimmer active={true} inverted={inverted}>\r\n        <Loader content={content} />\r\n    </Dimmer>\r\n  );\r\n}\r\n","import { useField } from 'formik';\r\nimport * as React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\nexport interface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea (props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={ meta.touched && meta.error }>\r\n            <label>{ props.label }</label>\r\n            <textarea { ...field } { ...props } />\r\n            { meta.touched && meta.error && (\r\n                <Label basic color='red'>{ meta.error }</Label>\r\n            )}\r\n        </Form.Field>\r\n    );\r\n}\r\n","import { useField } from 'formik';\r\nimport * as React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\nexport interface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput (props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);  // helpers are used to manually set value\r\n    return (\r\n        <Form.Field error={ meta.touched && meta.error }>\r\n            <label>{ props.label }</label>\r\n\r\n            <Select\r\n                clearable  // means the x at the right to clear/unselect value\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(event, data) => helpers.setValue(data.value)}\r\n                onBlur={() => helpers.setTouched(true)}  // need to set manually since we can't spread all like in MyTextInput\r\n                placeholder={props.placeholder}\r\n            />\r\n\r\n            { meta.touched && meta.error && (\r\n                <Label basic color='red'>{ meta.error }</Label>\r\n            )}\r\n        </Form.Field>\r\n    );\r\n}\r\n","export const categoryOptions = [\r\n    { text: 'Drinks', value: 'drinks' },\r\n    { text: 'Culture', value: 'culture' },\r\n    { text: 'Film', value: 'film' },\r\n    { text: 'Food', value: 'food' },\r\n    { text: 'Music', value: 'music' },\r\n    { text: 'Travel', value: 'travel' },\r\n];","import { useField } from 'formik';\r\nimport * as React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\r\n\r\n\r\nexport default function MyDateInput (props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={ meta.touched && meta.error }>\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={((field.value && new Date(field.value)) || null)}  // initial value\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            { meta.touched && meta.error && (\r\n                <Label basic color='red'>{ meta.error }</Label>\r\n            )}\r\n        </Form.Field>\r\n    );\r\n}\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\n\r\nexport default observer(function ActivityForm () {\r\n  const { createActivity, updateActivity, loadActivity, loadingInitial } = useStore().activityStore;\r\n  const { id } = useParams<{ id: string }>();  // routing id\r\n  const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n\r\n  useEffect(() => {  // load activity for edit mode\r\n    if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)));\r\n  }, [id, loadActivity]);\r\n\r\n\r\n  let history = useHistory();\r\n  function handleFormSubmit(activity: ActivityFormValues) {\r\n    if (!activity.id) {\r\n      let newActivity = { ...activity, id: uuid() };\r\n      createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\r\n    } else {\r\n      updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\r\n    }\r\n  }\r\n\r\n\r\n  const validationSchema = Yup.object({\r\n    title: Yup.string().required('The activity title is required'),\r\n    description: Yup.string().required('The activity description is required'),\r\n    category: Yup.string().required(),\r\n    date: Yup.string().required('Date is required').nullable(),\r\n    venue: Yup.string().required(),\r\n    city: Yup.string().required()\r\n  });\r\n\r\n\r\n  if (loadingInitial) return <LoadingComponent content='Loading activity...' />;\r\n\r\n\r\n  return (\r\n    <Segment clearing>  {/* cleared floating content to prevent buttons popping out of the form */}\r\n      <Header content='Activity Details' sub color='teal' />\r\n      \r\n      <Formik \r\n        validationSchema={validationSchema}  // using our yup validation\r\n        enableReinitialize  // to populate and re-render the form when activity changes in the use effect (when editing)\r\n        initialValues={activity} \r\n        onSubmit={values => handleFormSubmit(values)}\r\n      >\r\n        {({ handleSubmit, isValid, isSubmitting, dirty }) => (  // we are destructuring the props (render props pattern) given by Formik \r\n          <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>  {/* with just the name Formik chains the Fields to fields in the values object */}\r\n            <MyTextInput placeholder='Title' name='title' />  \r\n            <MyTextArea placeholder='Description' name='description' rows={3} />\r\n            <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n            <MyDateInput \r\n              placeholderText='Date' \r\n              name='date' \r\n              showTimeSelect\r\n              timeCaption='time'\r\n              dateFormat='MMMM d, yyyy h:mm aa'\r\n            />\r\n\r\n            <Header content='Location Details' sub color='teal' />\r\n            <MyTextInput placeholder='City' name='city' />\r\n            <MyTextInput placeholder='Venue' name='venue' />\r\n            \r\n            <Button \r\n              disabled={!isValid || isSubmitting || !dirty}\r\n              loading={isSubmitting} \r\n              floated='right' \r\n              positive \r\n              type='submit' \r\n              content='Submit'\r\n            />\r\n            \r\n            <Button as={Link} to={'/activities'} floated='right' type='button' content='Cancel' />\r\n          </Form> \r\n        )}\r\n      </Formik>\r\n    </Segment>\r\n  );\r\n})\r\n","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport {Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns/esm'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n  const { commentStore } = useStore();\r\n  \r\n  useEffect(() => {\r\n    if (activityId) {\r\n      commentStore.createHubConnection(activityId);  // create hub connection after creation\r\n    }\r\n    return () => commentStore.clearComments();  // cleanup connection onDestroy\r\n  }, [commentStore, activityId]);\r\n\r\n  return (\r\n      <>\r\n          <Segment\r\n            textAlign='center'\r\n            attached='top'\r\n            inverted\r\n            color='teal'\r\n            style={{border: 'none'}}\r\n          >\r\n            <Header>Chat about this event</Header>\r\n          </Segment>\r\n\r\n          <Segment attached clearing>\r\n            <Formik\r\n              onSubmit={(values, {resetForm}) => \r\n                commentStore.addComment(values).then(() => resetForm())}  // reset form after sending\r\n              initialValues={{ body: '' }}\r\n              validationSchema={Yup.object({\r\n                body: Yup.string().required()\r\n              })}\r\n            >\r\n              {({ isSubmitting, isValid, handleSubmit }) => ( \r\n                <Form className='ui form'>  \r\n                  <Field name='body'>\r\n                    {(props: FieldProps) => (\r\n                      <div style={{ position: 'relative' }}>\r\n                        <Loader active={isSubmitting} />\r\n\r\n                        <textarea \r\n                          placeholder='Enter your comment (ENTER to submit, SHIFT+ENTER for new line)'\r\n                          rows={2}\r\n                          {...props.field}\r\n                          onKeyPress={event => { \r\n                            if (event.key === 'Enter' && event.shiftKey) {\r\n                              return;\r\n                            }\r\n                            if (event.key === 'Enter' && !event.shiftKey) {\r\n                              event.preventDefault();  // prevent normal behaviour of adding a new line\r\n                              if (isValid) handleSubmit();\r\n                            }\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    )}\r\n                  </Field>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n\r\n\r\n            <Comment.Group>\r\n              {commentStore.comments.map(comment => (\r\n                <Comment key={comment.id}>\r\n                  <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n\r\n                  <Comment.Content>\r\n                    <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                      {comment.displayName}\r\n                    </Comment.Author>\r\n\r\n                    <Comment.Metadata>\r\n                      <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                    </Comment.Metadata>\r\n\r\n                    <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                  </Comment.Content>\r\n                </Comment>\r\n              ))}\r\n            </Comment.Group>\r\n          </Segment>\r\n      </>\r\n  )\r\n})","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'  // dimming image\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',  // can makes the text in top of the image\r\n    bottom: '5%',  // what makes the text positioned relative to the bottom of the image\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({activity}: Props) {\r\n    const { updateAttendance, loading, cancelActivitToggle } = useStore().activityStore;\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled &&\r\n                    <Label ribbon color='red' content='Cancelled' style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }} />\r\n                }\r\n\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                \r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n\r\n                                <p>Hosted by <strong>\r\n                                    <Link to={`/profiles/${activity.host?.username}`}>\r\n                                        {activity.host?.displayName}\r\n                                    </Link>\r\n                                </strong></p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            \r\n            <Segment clearing attached='bottom'>\r\n\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button onClick={cancelActivitToggle} loading={loading} color={activity.isCancelled ? 'teal' : 'red'} content={activity.isCancelled ? 'Re-activate': 'Cancel' } basic floated='left' />\r\n                        <Button as={Link} to={`/manage/${activity.id}`} disabled={activity.isCancelled} color='blue' floated='right'>Manage Event</Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button onClick={updateAttendance} loading={loading}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button onClick={updateAttendance} color='teal' loading={loading} disabled={activity.isCancelled}>Join Activity</Button>\r\n                )}\r\n\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({ activity: { attendees, host } }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    { attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            \r\n                            {attendee.username === host?.username &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right' \r\n                                >\r\n                                    Host\r\n                                </Label>\r\n                            }\r\n\r\n\r\n                            <Image size='tiny' src={ attendee.image || '/assets/user.png'} />\r\n\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                                }\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n    )\r\n})\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\n\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n\r\n                    <Grid.Column width={15}>\r\n                        <span>{format(activity.date!, 'dd MMM yyyy h:mm aa')}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            \r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    \r\n                    <Grid.Column width={15}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\nimport ActivityDetailedInfo from './ActivityDetailsInfo';\r\n\r\n\r\nexport default observer(function ActivityDetails () {\r\n  const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = useStore().activityStore;\r\n  \r\n  const { id } = useParams<{ id: string }>();  // routing id\r\n  useEffect(() => {\r\n    if (id) loadActivity(id);\r\n    return () => clearSelectedActivity();  // clear activity to close hub connection\r\n  }, [id, loadActivity, clearSelectedActivity]);\r\n  \r\n  if (loadingInitial || !activity) return <LoadingComponent />;  // activity would never be undefined\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={10}>\r\n        <ActivityDetailedHeader activity={activity} />\r\n        <ActivityDetailedInfo activity={activity} />\r\n        <ActivityDetailedChat activityId={activity.id} />\r\n      </Grid.Column>\r\n\r\n      <Grid.Column width={6}>\r\n        <ActivityDetailedSidebar activity={activity} />\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n})\r\n","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\n\r\nexport default function TestErrors() {\r\n    let baseUrl = process.env.REACT_APP_API_URL;\r\n    if (baseUrl === '/api') baseUrl = '';  // we wan't nothing for production mode\r\n\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + '/buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + '/buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + '/buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + '/buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + '/activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + '/activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Errors' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n\r\n            {errors && \r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nexport interface Props {\r\n    message: string;\r\n}\r\n\r\nexport default function App (props: Props) {\r\n  return (\r\n    <Segment placeholder>\r\n        <Header icon>\r\n            <Icon name='search' />\r\n            Oops - we've looked everywhere and couldn't find this :(\r\n        </Header>\r\n\r\n        <Segment.Inline>\r\n            <Button as={Link} to='/activities' primary>\r\n                Return to activities page\r\n            </Button>\r\n        </Segment.Inline>\r\n    </Segment>\r\n  );\r\n}\r\n","import { observer } from 'mobx-react-lite';\r\nimport * as React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\n\r\nexport default observer( function ServerError () {\r\n    const error = useStore().commonStore.error;\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={error?.message} />\r\n            { error?.details && \r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{ marginTop: '10px' }}>\r\n                        { error?.details }\r\n                    </code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    );\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport * as React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\n\r\nexport default observer(function ModalContainer () {\r\n  const { modal, closeModal } = useStore().modalStore;\r\n  return (\r\n    <Modal closeIcon dimmer='blurring' open={modal.open} onClose={closeModal} size='mini'>\r\n        <Modal.Content>\r\n            {modal.body}\r\n        </Modal.Content>\r\n    </Modal>\r\n  );\r\n})","import * as React from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../app/stores/store';\r\nimport { Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../app/common/form/MyTextArea';\r\nimport { Button } from 'semantic-ui-react';\r\n\r\n\r\nexport interface Props {\r\n  setEditMode: (editMode: boolean) => void;  // to toggle between display and this edit form in the parent component\r\n}\r\n\r\n\r\nexport default observer(function ProfileEditForm ({ setEditMode }: Props) {\r\n  const { profile, updateProfile } = useStore().profileStore;\r\n  return (\r\n    <Formik\r\n      initialValues={{ displayName: profile?.displayName, bio: profile?.bio }}\r\n      onSubmit={values => {\r\n        updateProfile(values);\r\n        setEditMode(false);\r\n      }}\r\n      validationSchema={Yup.object({\r\n        displayName: Yup.string().required()\r\n      })}\r\n    >\r\n      {({ isSubmitting, isValid, dirty }) => (\r\n        <Form className='ui form'>\r\n          <MyTextInput placeholder='Display Name' name='displayName' />\r\n          <MyTextArea rows={3} placeholder='Adde your bio' name='bio' />\r\n          <Button positive type='submit' loading={isSubmitting} content='Update profile' floated='right' disabled={!isValid || !dirty} />\r\n        </Form>\r\n      )}\r\n\r\n    </Formik>\r\n  );\r\n})\r\n","import * as React from 'react';\r\nimport { useState } from 'react';\r\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileEditForm from './ProfileEditForm';\r\n\r\n\r\nexport default function ProfileAbout () {\r\n  const { isCurrentUser, profile } = useStore().profileStore;\r\n  const [editMode, setEditMode] = useState(false);\r\n  return (\r\n    <Tab.Pane>\r\n      <Grid>\r\n        <Grid.Column width='16'>\r\n          <Header floated='left' icon='user' content={`About ${profile?.username}`} />\r\n\r\n          {isCurrentUser && (\r\n            <Button \r\n              floated='right'\r\n              basic\r\n              content={editMode ? 'Cancel' : 'Edit Profile'}\r\n              onClick={() => setEditMode(!editMode)}\r\n            />\r\n          )}\r\n          \r\n        </Grid.Column>\r\n\r\n        <Grid.Column width='16'>\r\n          {editMode ? <ProfileEditForm setEditMode={setEditMode} />\r\n            : <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>  // pre-wrap to display line breaks\r\n          }\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n}\r\n","import { format } from 'date-fns';\r\nimport { observer } from 'mobx-react-lite';\r\nimport * as React from 'react';\r\nimport { SyntheticEvent } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Grid, Header, Tab, TabProps, Image } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\n\r\nconst panes = [\r\n  { menuItem: 'Future Events', pane: { key: 'future' } },\r\n  { menuItem: 'Past Events', pane: { key: 'past' } },\r\n  { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\n\r\n\r\nexport default observer(function App () {\r\n\r\n  const { loadUserActivities, profile, loadingActivities, userActivities } = useStore().profileStore;\r\n\r\n  React.useEffect(() => {\r\n    loadUserActivities(profile!.username);\r\n  }, [loadUserActivities, profile]);\r\n\r\n  const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n    loadUserActivities(\r\n      profile!.username, \r\n      panes[data.activeIndex as number].pane.key  // get predicate from panes constant\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Tab.Pane loading={loadingActivities}>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header floated='left' icon='calendar' content={'Activities'} />\r\n        </Grid.Column>\r\n        \r\n        <Grid.Column width={16}>\r\n          <Tab \r\n            panes={panes}\r\n            menu={{ secondary: true, pointing: true }}  // menu looks\r\n            onTabChange={(e, data) => handleTabChange(e, data)}\r\n          />\r\n\r\n          <br />\r\n\r\n          <Card.Group itemsPerRow={4}>\r\n            {userActivities.map(activity => (\r\n              <Card\r\n                as={Link}\r\n                to={`/activities/${activity.id}`}\r\n                key={activity.id}\r\n              >\r\n                <Image \r\n                  src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                  style={{ minHeight: 100, objectFit: 'cover' }}\r\n                />\r\n                <Card.Content>\r\n                  <Card.Header textAlign='center'>{activity.title}</Card.Header>\r\n\r\n                  <Card.Meta textAlign='center'>\r\n                    <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                    <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                  </Card.Meta>\r\n                </Card.Content> \r\n              </Card>\r\n            ))}\r\n          </Card.Group>\r\n\r\n        </Grid.Column>\r\n\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport * as React from 'react';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileCard from './ProfileCard';\r\n\r\n\r\nexport default observer(function ProfileFollowings () {\r\n  const { profile, followings, loadingFollowings, activeTab } = useStore().profileStore;\r\n  return (\r\n    <Tab.Pane loading={loadingFollowings}>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header \r\n            floated='left' \r\n            icon='user' \r\n            content={ activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} />\r\n        </Grid.Column>\r\n\r\n        <Grid.Column width={16}>\r\n          <Card.Group itemsPerRow={4}>\r\n            {followings.map(profile => (\r\n              <ProfileCard key={profile.username} profile={profile} />\r\n            ))}\r\n          </Card.Group>\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n})\r\n","import * as React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';  // required (added manually)\r\n\r\n\r\nexport interface Props {\r\n  imagePreview: string;\r\n  setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\n\r\nexport default function PhotoWidgetCropper ({ imagePreview, setCropper }: Props) {\r\n  return (\r\n    <Cropper\r\n      src={imagePreview}\r\n      style={{ height: 200, width: '100%' }}\r\n      initialAspectRatio={1}\r\n      aspectRatio={1}  // enforces square images\r\n      preview='.img-preview'  // give preview in a css class named img-preview\r\n\r\n      guides={false}\r\n      viewMode={1}\r\n      autoCropArea={1}\r\n      background={false}\r\n      onInitialized={cropper => setCropper(cropper)}\r\n    />\r\n  );\r\n}\r\n","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\n\r\ninterface Props {\r\n  setFiles: (files: any) => void;\r\n}\r\n\r\n\r\nexport default function MyDropzone({ setFiles }: Props) {\r\n  const dzStyles = {\r\n    border: 'dashed 3px #eee',\r\n    borderColor: '#eee',\r\n    borderRadius: '5px',\r\n    paddingTop: '30px',\r\n    textAlign: 'center' as 'center',\r\n    height: 200\r\n  };\r\n\r\n  const dzActive = {\r\n    borderColor: 'green'\r\n  };\r\n\r\n  const onDrop = useCallback(acceptedFiles => {  // called when images are dropped \r\n    setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n      preview: URL.createObjectURL(file)  // pass images as url objects (with a given set of properties)\r\n    })))\r\n  }, [setFiles]);\r\n\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({onDrop});\r\n\r\n  return (\r\n    <div {...getRootProps()} style={ isDragActive ?  {...dzStyles, ...dzActive} : {...dzStyles} }>\r\n      <input {...getInputProps()} />\r\n        <Icon name='upload' size='huge' />\r\n        <Header content='Drop image here' />\r\n    </div>\r\n  )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\n\r\n\r\nexport interface Props {\r\n  loading: boolean;\r\n  uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\n\r\nexport default function PhotoUploadWidget ({ loading, uploadPhoto }: Props) {\r\n  const [files, setFiles] = useState<any>([]);  // we can upload multiple images at the same time, hence, a list\r\n  \r\n  const [cropper, setCropper] = useState<Cropper>();\r\n\r\n  function onCrop() {\r\n    if (cropper) {\r\n      cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n    }\r\n  }\r\n\r\n  useEffect(() => {  // release previews in memory on component destroy\r\n    return () => {\r\n      files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n    }\r\n  }, [files])\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid.Column width={4}>\r\n        <Header sub color='teal' content='Step 1 - Upload' />\r\n        <PhotoWidgetDropzone setFiles={setFiles} />\r\n      </Grid.Column>\r\n      \r\n      <Grid.Column width={1} />\r\n      \r\n      <Grid.Column width={4}>\r\n        <Header sub color='teal' content='Step 2 - Crop' />\r\n        {files && files.length > 0 && (\r\n          <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n        )}\r\n      </Grid.Column>\r\n\r\n      <Grid.Column width={1} />\r\n\r\n      <Grid.Column width={4}>\r\n        <Header sub color='teal' content='Step 3 - Preview and Upload' />\r\n        {files && files.length > 0 && \r\n          <>\r\n            <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />   {/* we can display the preview wiht the css class with chose in PhotoWidgetCropper */}\r\n            <Button.Group widths={2}>\r\n              <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n              <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n            </Button.Group>\r\n          </>\r\n        }\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n}\r\n","import { observer } from 'mobx-react-lite';\r\nimport * as React from 'react';\r\nimport { SyntheticEvent, useState } from 'react';\r\nimport { Card, Header, Image, Tab, Grid, Button } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\n\r\nexport interface Props {\r\n  profile: Profile\r\n}\r\n\r\n\r\nexport default observer(function ProfilePhotos ({ profile }: Props) {\r\n  const { isCurrentUser, uploadPhoto, uploading, loading, setMainPhoto, deletePhoto } = useStore().profileStore;\r\n  const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n  const [target, setTarget] = useState('');  // to single out the loading for the main photo\r\n\r\n  function handlePhotoUpload(file: Blob) {\r\n    uploadPhoto(file).then(() => setAddPhotoMode(false))\r\n  }\r\n\r\n  function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n    setTarget(e.currentTarget.name);\r\n    setMainPhoto(photo);\r\n  }\r\n  \r\n  function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n    setTarget(e.currentTarget.name);\r\n    deletePhoto(photo);\r\n  }\r\n\r\n  return (\r\n    <Tab.Pane>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header floated='left' icon='image' content='Photos' />\r\n          \r\n          {isCurrentUser && (\r\n            <Button floated='left' onClick={() => setAddPhotoMode(!addPhotoMode)} basic content={addPhotoMode ? 'Cancel' : 'Add Photo'} />\r\n          )}\r\n        </Grid.Column>\r\n\r\n        <Grid.Column width={16}>\r\n          {addPhotoMode ? (\r\n            <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n            \r\n          ) : (\r\n            <Card.Group itemsPerRow={5}>\r\n              {profile.photos?.map(photo => (\r\n                <Card key={photo.id}>\r\n                  <Image src={photo.url} />\r\n                  {isCurrentUser && (\r\n                    <Button.Group fluid widths={2}>\r\n                      <Button \r\n                        basic \r\n                        color='green' \r\n                        content='Main' \r\n                        name={'main' + photo.id}  // 'main'+ to single out loading between buttons \r\n                        disabled={photo.isMain} \r\n                        loading={target === 'main' + photo.id && loading}  // to show loading just of the singled out main photo\r\n                        onClick={e => handleSetMainPhoto(photo, e)}\r\n                      />\r\n                      <Button \r\n                        basic \r\n                        name={photo.id} \r\n                        color='red' \r\n                        icon='trash' \r\n                        disabled={photo.isMain} \r\n                        loading={target === photo.id && loading}\r\n                        onClick={e => handleDeletePhoto(photo, e)}\r\n                      />\r\n                    </Button.Group>\r\n                  )}\r\n                </Card>\r\n              ))}\r\n            </Card.Group>\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n\r\n    </Tab.Pane>\r\n  );\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport * as React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfilePhotos from './ProfilePhotos';\r\n\r\nexport interface Props {\r\n  profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileContent ({ profile }: Props) {\r\n  const {setActiveTab} = useStore().profileStore;\r\n  const panes = [\r\n    { menuItem: 'About', render: () => <ProfileAbout />},\r\n    { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\r\n    { menuItem: 'Events', render: () => <ProfileActivities />},\r\n    { menuItem: 'Followers', render: () => <ProfileFollowings />},\r\n    { menuItem: 'Following', render: () => <ProfileFollowings />}\r\n  ];\r\n  return (\r\n    <Tab \r\n      menu={{ fluid: true, vertical: true }}\r\n      menuPosition='right'\r\n      panes={panes}\r\n      onTabChange={(e, data) => setActiveTab(data.activeIndex)}\r\n    />\r\n  );\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport * as React from 'react';\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\nexport interface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileHeader ({ profile }: Props) {\r\n  return (\r\n    <Segment>\r\n        <Grid>\r\n            <Grid.Column width={12}>\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                        <Item.Content verticalAlign='middle'>\r\n                            <Header as='h1' content={profile.displayName} />\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Grid.Column>\r\n\r\n            <Grid.Column width={4}>\r\n                <Statistic.Group widths={2}>\r\n                    <Statistic label='Followers' value={profile.followersCount} />\r\n                    <Statistic label='Following' value={profile.followingCount} />\r\n                </Statistic.Group>\r\n\r\n                <Divider />\r\n\r\n                <FollowButton profile={profile} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    </Segment>\r\n  );\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport * as React from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\n\r\nexport default observer(function ProfilePage () {\r\n  const { username } = useParams<{username: string}>();\r\n  const { loadingProfile, loadProfile, profile, setActiveTab } = useStore().profileStore;\r\n\r\n  React.useEffect(() => {\r\n    loadProfile(username);\r\n    return () => setActiveTab(0);  // cleanup followings list\r\n  }, [loadProfile, username, setActiveTab]);\r\n\r\n  if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n  return (\r\n    <Grid>\r\n        <Grid.Column width={16}>\r\n            {profile &&\r\n              <>\r\n                <ProfileHeader profile={profile} />\r\n                <ProfileContent profile={profile} />\r\n              </>\r\n            }\r\n        </Grid.Column>\r\n    </Grid>\r\n  );\r\n})\r\n","import * as React from 'react';\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from 'react-router-dom';\r\nimport { useStore } from '../stores/store';\r\n\r\n\r\nexport interface Props extends RouteProps {\r\n  component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType\r\n}\r\n\r\n\r\nexport default function PrivateRoute ({ component: Component, ...rest }: Props) {\r\n  const { isLoggedIn } = useStore().userStore;\r\n  return (  // redirect to home page if not LoggedIn\r\n    <Route \r\n      {...rest}\r\n      render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n    />\r\n  );\r\n}\r\n","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport HomePage from '../../features/home/HomePage';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\n\nfunction App() {\n  const location = useLocation();\n  const { commonStore, userStore } = useStore();\n\n\n  useEffect(() => {  // try to auto login\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore]);\n\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />  {/* to show toasts */}\n      <ModalContainer />  {/* to show modals */}\n\n      <Route exact path='/' component={HomePage} />\n\n      <Route \n        path={'/(.+)'}  // match expr /(anything)+ to have home page without navbar\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{marginTop: '6em'}}>  {/* we need marginTop since navbar has fixed top */}\n              \n              <Switch>  {/* only match 1, for NotFound to be a catch all */}\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute exact path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute exact path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute exact path='/errors' component={TestErrors} />\n                <Route exact path='/server-error' component={ServerError} />\n                <Route \n                  exact \n                  path={['/createActivity', '/manage/:id']} \n                  key={location.key}  // giving a key ensures the component is re-rendered when location.key changes (when going between edit-create activity form)\n                  component={ActivityForm} \n                />\n                <Route component={NotFound} />\n              </Switch>\n              \n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);  // observe store changes (aka re render)\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {  // scroll to top when route changes\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './app/layout/styles.css';\nimport 'react-calendar/dist/Calendar.css';  // calendar styling\nimport 'react-toastify/dist/ReactToastify.min.css';  // toastify styling\nimport 'react-datepicker/dist/react-datepicker.css';  // date picker styling\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\n\nexport const history = createBrowserHistory();  // to redirect outside components\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={ history }>  { /* change BrowserRouter -> Router providing history object */}\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}